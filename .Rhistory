)
# Remove NA values created by lag/rolling functions
time_series_data <- na.omit(time_series_data)
# Normalize data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
time_series_data_norm <- as.data.frame(lapply(time_series_data[, -1], normalize))
# Split data
set.seed(123)
index <- sample(1:nrow(time_series_data_norm), round(0.7 * nrow(time_series_data_norm)))
train_data <- time_series_data_norm[index, ]
test_data <- time_series_data_norm[-index, ]
# Train neural network
nn <- neuralnet(Value ~ Month + Year + Lag1 + Lag2 + Lag3 + MovingAvg3,
data = train_data, hidden = c(5, 3), linear.output = TRUE)
# Plot the network
plot(nn)
# Predict using the trained network
nn_predictions <- compute(nn, test_data[, -1])$net.result
install.packages("keras")
install.packages("lubridate")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("nnet")
library(neuralnet)
library(nnet)
library(keras)
library(tidyverse)
library(lubridate)
library(zoo)
# Example time series data preparation
# Generate a hypothetical time series dataset
set.seed(123)
n <- 100
time_series_data <- data.frame(
Date = seq.Date(from = as.Date("2020-01-01"), by = "month", length.out = n),
Value = cumsum(runif(n, min = -10, max = 10))
)
# Feature engineering: create time-related features
time_series_data <- time_series_data %>%
mutate(
Month = month(Date),
Year = year(Date),
Lag1 = lag(Value, 1),
Lag2 = lag(Value, 2),
Lag3 = lag(Value, 3),
MovingAvg3 = rollmean(Value, 3, fill = NA, align = "right")
)
# Remove NA values created by lag/rolling functions
time_series_data <- na.omit(time_series_data)
# Normalize data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
time_series_data_norm <- as.data.frame(lapply(time_series_data[, -1], normalize))
# Split data
set.seed(123)
index <- sample(1:nrow(time_series_data_norm), round(0.7 * nrow(time_series_data_norm)))
train_data <- time_series_data_norm[index, ]
test_data <- time_series_data_norm[-index, ]
# Train neural network
nn <- neuralnet(Value ~ Month + Year + Lag1 + Lag2 + Lag3 + MovingAvg3,
data = train_data, hidden = c(5, 3), linear.output = TRUE)
# Plot the network
plot(nn)
# Predict using the trained network
nn_predictions <- compute(nn, test_data[, -1])$net.result
# Split data
set.seed(123)
index <- sample(1:nrow(time_series_data_norm), round(0.7 * nrow(time_series_data_norm)))
train_data <- time_series_data_norm[index, ]
test_data <- time_series_data_norm[-index, ]
# Train neural network
nn <- neuralnet(Value ~ Month + Year + Lag1 + Lag2 + Lag3 + MovingAvg3,
data = train_data, hidden = c(5, 3), linear.output = TRUE)
# Plot the network
plot(nn)
# Predict using the trained network
nn_predictions <- compute(nn, test_data[, -1])$net.result
# Evaluate performance
actual_values <- test_data$Value
predicted_values <- nn_predictions
# Calculate Mean Squared Error
mse <- mean((actual_values - predicted_values)^2)
print(paste("Mean Squared Error:", mse))
# Train neural network
nn <- neuralnet(Value ~ Month + Year + Lag1 + Lag2 + Lag3 + MovingAvg3,
data = train_data, hidden = c(5, 3), linear.output = TRUE)
plot(nn)
plot(nn)
View(nn)
plot(nn)
install.packages("quarto")
library(quarto)
data <- data.frame(
Club = c("Driver", "3-wood", "5-wood", "Hybrid 15-18Â°", "3 Iron", "4 Iron", "5 Iron", "6 Iron", "7 Iron", "8 Iron", "9 Iron", "PW"),
ClubSpeed = c(113, 107, 103, 100, 98, 96, 94, 92, 90, 87, 85, 83),
AttackAngle = c(-1.3, -2.9, -3.0, -3.5, -3.1, -3.4, -3.7, -4.1, -4.3, -4.5, -4.7, -5.0),
BallSpeed = c(167, 158, 152, 146, 142, 137, 132, 127, 120, 115, 109, 102),
SmashFactor = c(1.48, 1.48, 1.47, 1.46, 1.45, 1.43, 1.41, 1.38, 1.33, 1.32, 1.28, 1.23),
LaunchAngle = c(10.9, 9.2, 9.4, 10.2, 10.4, 11.0, 12.1, 14.1, 16.3, 18.1, 20.4, 24.2),
SpinRate = c(2686, 3655, 4350, 4437, 4630, 4836, 5361, 6231, 7097, 7998, 8647, 9304),
MaxHeight = c(32, 30, 31, 29, 27, 28, 31, 30, 32, 31, 30, 29),
LandAngle = c(38, 43, 47, 47, 46, 48, 49, 50, 50, 50, 51, 52),
Carry = c(275, 243, 230, 225, 212, 203, 194, 183, 172, 160, 148, 136)
)
data <- data.frame(
BallSpeed = c(164),
LaunchAngle = c(15),
Apex = (38),
LandingAngle = (35),
Hangtime = (6.5),
Curve = (16),
Offline = (25),
FlatCarry = (289),
TotalDistance = (325)
)
data <- data.frame(
BallSpeed = c(164),
LaunchAngle = c(15),
Apex = (38),
LandingAngle = (35),
Hangtime = (6.5),
Curve = (16),
Offline = (25),
FlatCarry = (289),
TotalDistance = (325)
)
# Function to calculate the 3D trajectory
calculate_3d_trajectory <- function(ball_speed, launch_angle, curve, gravity = 9.8, time_step = 0.1) {
radian_angle <- launch_angle * pi / 180
total_time <- 2 * ball_speed * sin(radian_angle) / gravity
times <- seq(0, total_time, by = time_step)
x <- ball_speed * cos(radian_angle) * times
y <- ball_speed * sin(radian_angle) * times - 0.5 * gravity * times^2
z <- curve * times / max(times)
data.frame(Time = times, X = x, Y = y, Z = z)
}
# Your data
data <- data.frame(
BallSpeed = c(164),
LaunchAngle = c(15),
Apex = c(38),
LandingAngle = c(35),
Hangtime = c(6.5),
Curve = c(16),
Offline = c(25),
FlatCarry = c(289),
TotalDistance = c(325)
)
# Calculate the 3D trajectory
trajectory <- calculate_3d_trajectory(data$BallSpeed, data$LaunchAngle, data$Curve)
# Plot the 3D trajectory
plot_ly(trajectory, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d', mode = 'lines') %>%
layout(title = "Golf Shot 3D Trajectory", scene = list(
xaxis = list(title = 'Distance (yards)'),
yaxis = list(title = 'Height (yards)'),
zaxis = list(title = 'Curve (yards)')
))
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
# Function to calculate the 3D trajectory
calculate_3d_trajectory <- function(ball_speed, launch_angle, curve, gravity = 9.8, time_step = 0.1) {
radian_angle <- launch_angle * pi / 180
total_time <- 2 * ball_speed * sin(radian_angle) / gravity
times <- seq(0, total_time, by = time_step)
x <- ball_speed * cos(radian_angle) * times
y <- ball_speed * sin(radian_angle) * times - 0.5 * gravity * times^2
z <- curve * times / max(times)
data.frame(Time = times, X = x, Y = y, Z = z)
}
# Your data
data <- data.frame(
BallSpeed = c(164),
LaunchAngle = c(15),
Apex = c(38),
LandingAngle = c(35),
Hangtime = c(6.5),
Curve = c(16),
Offline = c(25),
FlatCarry = c(289),
TotalDistance = c(325)
)
# Calculate the 3D trajectory
trajectory <- calculate_3d_trajectory(data$BallSpeed, data$LaunchAngle, data$Curve)
# Plot the 3D trajectory
plot_ly(trajectory, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d', mode = 'lines') %>%
layout(title = "Golf Shot 3D Trajectory", scene = list(
xaxis = list(title = 'Distance (yards)'),
yaxis = list(title = 'Height (yards)'),
zaxis = list(title = 'Curve (yards)')
))
# Calculate the 3D trajectory
trajectory <- calculate_3d_trajectory(data$BallSpeed, data$LaunchAngle, data$Curve)
# Plot the 3D trajectory
plot_ly(trajectory, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d', mode = 'lines') %>%
layout(title = "Golf Shot 3D Trajectory", scene = list(
xaxis = list(title = 'Distance (yards)'),
yaxis = list(title = 'Height (yards)'),
zaxis = list(title = 'Curve (yards)')
))
# Plot the 3D trajectory
plot_ly(trajectory, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d', mode = 'lines')
library(plotly)
# Plot the 3D trajectory
plot_ly(trajectory, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d', mode = 'lines')
# Install and load the rgl library
install.packages("rgl")
library(rgl)
# Function to convert spherical coordinates to Cartesian coordinates
spherical_to_cartesian <- function(radius, theta, phi) {
x <- radius * sin(phi) * cos(theta)
y <- radius * sin(phi) * sin(theta)
z <- radius * cos(phi)
return(c(x, y, z))
}
# Example values: radius (length of the line), theta (azimuthal angle), phi (polar angle)
radius <- 1
theta <- pi / 4  # 45 degrees
phi <- pi / 3    # 60 degrees
endpoint <- spherical_to_cartesian(radius, theta, phi)
# Plot the line in 3D space
open3d()
lines3d(rbind(c(0, 0, 0), endpoint), col = "red", lwd = 2)
# Install and load the rgl library
install.packages("rgl")
library(rgl)
# Function to convert spherical coordinates to Cartesian coordinates
spherical_to_cartesian <- function(radius, theta, phi) {
x <- radius * sin(phi) * cos(theta)
y <- radius * sin(phi) * sin(theta)
z <- radius * cos(phi)
return(c(x, y, z))
}
# Example values: radius (length of the line), theta (azimuthal angle), phi (polar angle)
radius <- 1
theta <- pi / 4  # 45 degrees
phi <- 15 * pi / 180  # 15 degrees
endpoint <- spherical_to_cartesian(radius, theta, phi)
# Plot the line in 3D space
open3d()
lines3d(rbind(c(0, 0, 0), endpoint), col = "red", lwd = 2)
install.packages("rgl")
library(rgl)
# Example values: radius (length of the line), theta (azimuthal angle), phi (polar angle)
radius <- 1
theta <- pi / 4  # 45 degrees
phi <- 15 * pi / 180  # 15 degrees
endpoint <- spherical_to_cartesian(radius, theta, phi)
open3d()
# Add reference axes
axes3d()
# Add a title
title3d(xlab = "X", ylab = "Y", zlab = "Z")
# Add the line
lines3d(rbind(c(0, 0, 0), endpoint), col = "red", lwd = 2)
# Function to convert spherical coordinates to Cartesian coordinates
spherical_to_cartesian <- function(radius, theta, phi) {
x <- radius * sin(phi) * cos(theta)
y <- radius * sin(phi) * sin(theta)
z <- radius * cos(phi)
return(c(x, y, z))
}
# Example values: radius (length of the line), theta (azimuthal angle), phi (polar angle)
radius <- 1
theta <- 0  # Direction along the x-axis
phi <- 15 * pi / 180  # 15 degrees off the ground
endpoint <- spherical_to_cartesian(radius, theta, phi)
# Plot the line in 3D space with reference lines/objects
open3d()
# Add reference axes
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z")
# Add grid lines
grid3d("x")
grid3d("y")
grid3d("z")
# Add a reference sphere at the origin
spheres3d(0, 0, 0, radius = 0.05, color = "blue")
# Add a reference plane (XY plane)
planes3d(0, 0, 1, 0, alpha = 0.3)
# Add the line
lines3d(rbind(c(0, 0, 0), endpoint), col = "red", lwd = 2)
# Install and load the rgl library
install.packages("rgl")
library(rgl)
# Function to convert spherical coordinates to Cartesian coordinates
spherical_to_cartesian <- function(radius, theta, phi) {
x <- radius * sin(phi) * cos(theta)
y <- radius * sin(phi) * sin(theta)
z <- radius * cos(phi)
return(c(x, y, z))
}
# Example values for the first segment: radius (length of the line), theta (azimuthal angle), phi (polar angle)
radius1 <- 1
theta1 <- 0  # Direction along the x-axis
phi1 <- 15 * pi / 180  # 15 degrees off the ground
endpoint1 <- spherical_to_cartesian(radius1, theta1, phi1)
# Example values for the second segment: radius (length of the line), theta (azimuthal angle), phi (polar angle)
radius2 <- 1
theta2 <- pi  # 180 degrees to go back to the x-axis
phi2 <- 35 * pi / 180  # 35 degrees
endpoint2 <- spherical_to_cartesian(radius2, theta2, phi2)
# Adjust endpoint2 coordinates to start from endpoint1
endpoint2 <- endpoint2 + endpoint1
# Plot the line in 3D space with reference lines/objects
open3d()
# Add reference axes
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z")
# Add grid lines
grid3d("x")
grid3d("y")
grid3d("z")
# Add a reference sphere at the origin
spheres3d(0, 0, 0, radius = 0.05, color = "blue")
# Add a reference plane (XY plane)
planes3d(0, 0, 1, 0, alpha = 0.3)
# Plot the first segment
lines3d(rbind(c(0, 0, 0), endpoint1), col = "red", lwd = 2)
# Plot the second segment
lines3d(rbind(endpoint1, endpoint2), col = "blue", lwd = 2)
install.packages("rgl")
# Function to convert spherical coordinates to Cartesian coordinates
spherical_to_cartesian <- function(radius, theta, phi) {
x <- radius * sin(phi) * cos(theta)
y <- radius * sin(phi) * sin(theta)
z <- radius * cos(phi)
return(c(x, y, z))
}
# Example values for the first segment: radius (length of the line), theta (azimuthal angle), phi (polar angle)
radius1 <- 1
theta1 <- 0  # Direction along the x-axis
phi1 <- 15 * pi / 180  # 15 degrees off the ground
endpoint1 <- spherical_to_cartesian(radius1, theta1, phi1)
# Example values for the second segment: radius (length of the line), theta (azimuthal angle), phi (polar angle)
radius2 <- 1
theta2 <- 0  # 0 degrees to ensure it stays in the positive x direction
phi2 <- pi - 35 * pi / 180  # 180 degrees - 35 degrees to ensure it bends back to the x-axis
endpoint2 <- spherical_to_cartesian(radius2, theta2, phi2)
# Adjust endpoint2 coordinates to start from endpoint1
endpoint2 <- endpoint1 + endpoint2
# Plot the line in 3D space with reference lines/objects
open3d()
# Add reference axes
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z")
# Add grid lines
grid3d("x")
grid3d("y")
grid3d("z")
# Add a reference sphere at the origin
spheres3d(0, 0, 0, radius = 0.05, color = "blue")
# Add a reference plane (XY plane)
planes3d(0, 0, 1, 0, alpha = 0.3)
# Plot the first segment
lines3d(rbind(c(0, 0, 0), endpoint1), col = "red", lwd = 2)
# Plot the second segment
lines3d(rbind(endpoint1, endpoint2), col = "blue", lwd = 2)
# Define the data
data <- data.frame(
BallSpeed = c(164),
LaunchAngle = c(15),
Apex = c(38),
LandingAngle = c(35),
Hangtime = c(6.5),
Curve = c(16),
Offline = c(25),
FlatCarry = c(289),
TotalDistance = c(325)
)
# Function to convert spherical coordinates to Cartesian coordinates
spherical_to_cartesian <- function(radius, theta, phi) {
x <- radius * sin(phi) * cos(theta)
y <- radius * sin(phi) * sin(theta)
z <- radius * cos(phi)
return(c(x, y, z))
}
# Initial launch parameters
launch_angle <- data$LaunchAngle * pi / 180  # Convert to radians
landing_angle <- data$LandingAngle * pi / 180  # Convert to radians
apex_height <- data$Apex
flat_carry <- data$FlatCarry
total_distance <- data$TotalDistance
curve <- data$Curve
offline <- data$Offline
# Calculate endpoints
# First segment: Launch to Apex
endpoint1 <- spherical_to_cartesian(flat_carry / 2, 0, launch_angle)
endpoint1[3] <- apex_height  # Set the z value to the apex height
# Second segment: Apex to Landing
endpoint2 <- spherical_to_cartesian(flat_carry / 2, 0, -landing_angle)
endpoint2 <- endpoint2 + endpoint1  # Adjust to start from endpoint1
# Adjust the trajectory for curve and offline values
endpoint2[1] <- endpoint2[1] + (offline / 2)  # Adjust x value for offline
endpoint2[2] <- endpoint2[2] + curve  # Adjust y value for curve
# Plot the line in 3D space with reference lines/objects
open3d()
# Add reference axes
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z")
# Add grid lines
grid3d("x")
grid3d("y")
grid3d("z")
# Add a reference sphere at the origin
spheres3d(0, 0, 0, radius = 0.05, color = "blue")
# Add a reference plane (XY plane)
planes3d(0, 0, 1, 0, alpha = 0.3)
# Plot the first segment
lines3d(rbind(c(0, 0, 0), endpoint1), col = "red", lwd = 2)
# Plot the second segment
lines3d(rbind(endpoint1, endpoint2), col = "blue", lwd = 2)
# Install and load th
# Define the data
data <- data.frame(
BallSpeed = c(164),
LaunchAngle = c(15),
Apex = c(38),
LandingAngle = c(35),
Hangtime = c(6.5),
Curve = c(16),
Offline = c(25),
FlatCarry = c(289),
TotalDistance = c(325)
)
# Function to convert spherical coordinates to Cartesian coordinates
spherical_to_cartesian <- function(radius, theta, phi) {
x <- radius * sin(phi) * cos(theta)
y <- radius * sin(phi) * sin(theta)
z <- radius * cos(phi)
return(c(x, y, z))
}
# Initial launch parameters
launch_angle <- data$LaunchAngle * pi / 180  # Convert to radians
landing_angle <- data$LandingAngle * pi / 180  # Convert to radians
apex_height <- data$Apex
flat_carry <- data$FlatCarry
total_distance <- data$TotalDistance
curve <- data$Curve
offline <- data$Offline
# Calculate the distance to apex point (half of flat carry distance)
distance_to_apex <- flat_carry / 2
# First segment: Launch to Apex
endpoint1 <- spherical_to_cartesian(distance_to_apex, 0, launch_angle)
endpoint1[3] <- apex_height  # Set the z value to the apex height
# Second segment: Apex to Landing
distance_from_apex_to_landing <- flat_carry / 2
endpoint2 <- spherical_to_cartesian(distance_from_apex_to_landing, 0, -landing_angle)
endpoint2 <- endpoint2 + endpoint1  # Adjust to start from endpoint1
# Adjust the trajectory for curve and offline values
endpoint2[1] <- flat_carry  # Final x position based on flat carry distance
endpoint2[2] <- curve  # Final y position based on curve
endpoint2[3] <- 0  # Final z position (ground level)
# Plot the line in 3D space with reference lines/objects
open3d()
# Add reference axes
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z")
# Add grid lines
grid3d("x")
grid3d("y")
grid3d("z")
# Add a reference sphere at the origin
spheres3d(0, 0, 0, radius = 0.05, color = "blue")
# Add a reference plane (XY plane)
planes3d(0, 0, 1, 0, alpha = 0.3)
# Plot the first segment
lines3d(rbind(c(0, 0, 0), endpoint1), col = "red", lwd = 2)
# Plot the second segment
lines3d(rbind(endpoint1, endpoint2), col = "blue", lwd = 2)
print(endpoint1)
# Plot the line in 3D space with reference lines/objects
open3d()
# Add reference axes
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z")
# Add grid lines
grid3d("x")
grid3d("y")
grid3d("z")
# Add a reference sphere at the origin
spheres3d(0, 0, 0, radius = 0.05, color = "blue")
# Add a reference plane (XY plane)
planes3d(0, 0, 1, 0, alpha = 0.3)
# Plot the first segment
lines3d(rbind(c(0, 0, 0), endpoint2), col = "red", lwd = 2)
# Plot the second segment
lines3d(rbind(endpoint2, endpoint1), col = "blue", lwd = 2)
lines3d(rbind(c(0, 0, 0), endpoint1), col = "red", lwd = 2)
# Plot the second segment
lines3d(rbind(endpoint1, endpoint2), col = "blue", lwd = 2)
# Plot the line in 3D space with reference lines/objects
open3d()
# Add reference axes
axes3d()
title3d(xlab = "X", ylab = "Y", zlab = "Z")
# Add grid lines
grid3d("x")
grid3d("y")
grid3d("z")
# Add a reference sphere at the origin
spheres3d(0, 0, 0, radius = 0.05, color = "blue")
# Plot the first segment
lines3d(rbind(c(0, 0, 0), endpoint2), col = "red", lwd = 2)
lines3d(rbind(endpoint1, endpoint2), col = "blue", lwd = 2)
setwd("~/Documents/R/blackjack")
shiny::runApp()
